package subtask3

/*
* Начатая в 2008 году и недавно набравшая популярность, игра, известная как Number Neighbor или Text Door Neighbor, предлагает пользователям отправлять текстовые сообщения на телефонные номера рядом с их собственным.

Традиционно это было сделано для чисел ± 1, поэтому у человека с номером телефона 555-555-5555 есть соседи 555-555-5554 и 555-555-5556.

Мы собираемся пойти дальше и подумать о соседях на основе классической телефонной клавиатуры.

Во-первых, давайте взглянем на классическую клавиатуру телефона:

клавиатура телефона

Мы можем считать определенные числа смежными, если они расположены непосредственно рядом или выше / ниже друг друга. Например, 1 находится рядом с 2 и 4 (и ни с чем другим), а 5 находится рядом с 2, 4, 6 и 8.

Давайте поищем телефонные номера, которые являются «соседями» данного телефонного номера, если любая (и только одна) из их цифр будет отличаться друг от друга в качестве номера, смежного с исходным.

Согласно этому определению, 555-555-5555 имеет как своих первоначальных соседей, так и, например, 554-555-5555 и 555-555-5558.

Проблема

Учитывая телефонный номер строки из целых чисел длиной N (1 ≤ N ≤ 10) в виде числовой строки (например, 555-555-5555 будет передан как «5555555555»), верните массив всех телефонных номеров в виде числовых строк, которые будут считается соседями этого номера телефона.

Примеры

Учитывая "1", возвращается ["2", "4"]

Если задано «8675309», возвращается [«5675309», «7675309», «9675309», «0675309», «8375309», «8575309», «8975309», «8645309», «8685309», «8672309», «8674309», «8676309», «8678309», «8675209», «8675609», «8675389», «8675306», «8675308»]

Заметки

Не оборачивайте клавиатуру стороной при нахождении соседних цифр. То есть не считайте 6 смежными с 4 или 0 смежными с 2.

Не считайте числа, диагональные друг к другу, смежными. Если входной номер отрицательный, верните ноль.

Не беспокойтесь о порядке числовых строк в возвращаемом массиве.
*
*  */
class TelephoneFinder {
    fun findAllNumbersFromGivenNumber(number: String): Array<String>? {
    if (number.toInt() < 0) return null
    val result = mutableListOf<String>()
    var pos = 0
    number.forEach {char ->
        val numberCharArray = number.toCharArray()
        getNeighborsNumbers(char).forEach {newChar ->
            numberCharArray[pos] = newChar
            val str = String(numberCharArray)
            result.add(str)
        }
        pos++
    }
    return result.toTypedArray()
}

    private fun getNeighborsNumbers(number: Char): List<Char>{
       return when (number){
            '0' -> listOf('8')
            '1' -> listOf('2','4')
            '2' -> listOf('1','3','5')
            '3' -> listOf('2','6')
            '4' -> listOf('1','5','7')
            '5' -> listOf('2','4','6','8')
            '6' -> listOf('3','5','9')
            '7' -> listOf('4','8')
            '8' -> listOf('0','5','7','9')
            else -> listOf('6','8')
       }
    }
}
